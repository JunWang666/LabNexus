name: Windows
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build
    # 运行平台，windows-latest 目前是 windows server 2022
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_ver: 6.9.1
            qt_arch: win64_msvc2022_64
            qt_target: win64_msvc2022_64
            msvc_arch: x64

    env:
      targetName: LabNexus.exe

    # 步骤
    steps:
      # 1. 安装Qt (已更新)
      - name: Install Qt
        # 更新到 v4，它会自动处理 MSVC 环境
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }} # <-- 使用 MSVC 架构

      # 2. 拉取代码 (版本更新)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 3. 使用 CMake 和 MSVC 编译
      - name: Build with MSVC (CMake)
        id: build
        shell: cmd
        run: |
          rem 设置 MSVC 编译环境，这步仍然需要
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}

          rem 1. CMake 配置步骤：生成 Visual Studio 项目文件
          rem -S . 指定源码在当前目录
          rem -B build 指定生成的文件放在一个新的 "build" 目录中
          rem -D CMAKE_PREFIX_PATH=%QT_ROOT_DIR% 告诉 CMake 在哪里找到你安装的 Qt
          cmake -S . -B build -D CMAKE_PREFIX_PATH=%QT_ROOT_DIR%

          rem 2. CMake 编译步骤：使用生成的项目文件进行编译
          rem --config Release 指定编译 Release 版本
          cmake --build build --config Release

      # 4. 上传构建产物
      - name: Upload build directory
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build

  test:
    name: Run unit tests
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build
      # 4. 运行单元测试
      - name: Run unit tests
        id: test
        shell: cmd
        run: |
          rem 切换到构建目录并执行测试
          cd build
          ctest -C Release --output-on-failure

  package:
    name: Package artifacts
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build
      # 5. 打包 (可选步骤，失败不影响整体构建状态)
      - name: package
        shell: pwsh
        env:
          archiveName: ${{ matrix.qt_ver }}-${{ matrix.qt_target }}-${{ matrix.qt_arch }}
          msvcArch: ${{ matrix.msvc_arch }}
        run: |
          # 检查构建是否成功
          if (-not (Test-Path "build/Release/${env:targetName}")) {
            Write-Warning "可执行文件不存在，跳过打包步骤"
            exit 0
          }
          
          # 检查脚本是否存在
          if (-not (Test-Path "scripts/windows-publish.ps1")) {
            Write-Warning "打包脚本不存在，跳过打包步骤"
            exit 0
          }
          
          # 执行打包
          try {
            & .\scripts\windows-publish.ps1 ${env:archiveName} "build/Release/${env:targetName}"
            $name = ${env:archiveName}
            echo "packageName=$name" >> $env:GITHUB_OUTPUT
            echo "packageSuccess=true" >> $env:GITHUB_OUTPUT
          } catch {
            Write-Warning "打包失败: $_"
            echo "packageSuccess=false" >> $env:GITHUB_OUTPUT
          }

      # 6. 上传构建产物 (仅在打包成功时执行)
      - name: Upload artifacts
        if: steps.package.outputs.packageSuccess == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}.zip

      # 7. 构建状态总结
      - name: Build Summary
        shell: pwsh
        run: |
          Write-Host "=== 构建状态总结 ===" -ForegroundColor Green
          
          # 检查构建状态
          if (Test-Path "build/Release/${env:targetName}") {
            Write-Host "✅ 构建成功: ${env:targetName}" -ForegroundColor Green
          } else {
            Write-Host "❌ 构建失败: 找不到可执行文件" -ForegroundColor Red
            exit 1
          }
          
          # 检查打包状态
          if ("${{ steps.package.outputs.packageSuccess }}" -eq "true") {
            Write-Host "✅ 打包成功" -ForegroundColor Green
          } elseif ("${{ steps.package.conclusion }}" -eq "skipped") {
            Write-Host "⏭️ 打包步骤被跳过" -ForegroundColor Yellow
          } else {
            Write-Host "⚠️ 打包失败或未执行" -ForegroundColor Yellow
          }
          
          Write-Host "🎉 整体构建流程完成" -ForegroundColor Green
