name: Windows
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build
    # 运行平台，windows-latest 目前是 windows server 2022
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_ver: 6.9.1
            qt_arch: win64_msvc2022_64
            msvc_arch: x64

    env:
      targetName: HelloActions-Qt.exe

    # 步骤
    steps:
      # 1. 安装Qt (已更新)
      - name: Install Qt
        # 更新到 v4，它会自动处理 MSVC 环境
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }} # <-- 使用 MSVC 架构

      # 2. 拉取代码 (版本更新)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 3. MSVC 编译 (已简化)
      - name: Build with MSVC
        id: build
        # install-qt-action@v4 会自动设置好环境，无需手动调用 vcvarsall.bat
        shell: cmd
        run: |
          qmake
          nmake

      # 4. 打包 (无需改动)
      - name: package
        id: package
        env:
          archiveName: ${{ matrix.qt_ver }}-${{ matrix.qt_target }}-${{ matrix.qt_arch }}
          msvcArch: ${{ matrix.msvc_arch }}
        shell: pwsh
        run: |
          & scripts\windows-publish.ps1 ${env:archiveName} ${env:targetName}
          # 记录packageName给后续step
           $name = ${env:archiveName}
           echo "packageName=$name" >> $env:GITHUB_OUTPUT

      # 5. 上传构建产物 (无需改动)
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}

      # 6. 上传到 Release (tag触发时)
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.package.outputs.packageName }}.zip
          asset_name: ${{ steps.package.outputs.packageName }}.zip
          tag: ${{ github.ref }}
          overwrite: true