name: Auto Build
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build, Test, and Package
    # 运行平台，windows-latest 目前是 windows server 2022
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_ver: 6.9.1
            qt_arch: win64_msvc2022_64
            qt_target: win64_msvc2022_64
            msvc_arch: x64

    env:
      targetName: LabNexus.exe

    # 步骤
    steps:
      # 1. 安装Qt
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          cache: true

      # 2. 拉取代码
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # 3. 缓存 CMake 构建目录
      - name: Cache CMake build
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-build-${{ matrix.qt_ver }}-${{ matrix.qt_arch }}-${{ matrix.msvc_arch }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ matrix.qt_ver }}-${{ matrix.qt_arch }}-${{ matrix.msvc_arch }}-

      # 4. 使用 CMake 和 MSVC 编译
      - name: Build with MSVC (CMake)
        shell: cmd
        run: |
          rem 设置 MSVC 编译环境
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          rem CMake 配置
          cmake -S . -B build -D CMAKE_PREFIX_PATH=%QT_ROOT_DIR%
          rem CMake 编译
          cmake --build build --config Release --parallel

      # 5. 运行单元测试
      - name: Run unit tests
        shell: cmd
        run: |
          rem 切换到构建目录并执行测试
          cd build
          ctest -C Release --output-on-failure

      # 6. 打包
      - name: Package
        id: package
        shell: pwsh
        env:
          archiveName: ${{ matrix.qt_ver }}-${{ matrix.qt_target }}-${{ matrix.qt_arch }}
          msvcArch: ${{ matrix.msvc_arch }}
        run: |
          if (-not (Test-Path "build/Release/${env:targetName}")) {
            Write-Warning "可执行文件不存在，跳过打包步骤"
            exit 0
          }
          if (-not (Test-Path "scripts/windows-publish.ps1")) {
            Write-Warning "打包脚本不存在，跳过打包步骤"
            exit 0
          }
          try {
            & .\scripts\windows-publish.ps1 ${env:archiveName} "build/Release/${env:targetName}"
            echo "packageSuccess=true" >> $env:GITHUB_OUTPUT
          } catch {
            Write-Warning "打包失败: $_"
            echo "packageSuccess=false" >> $env:GITHUB_OUTPUT
          }

      # 7. 构建状态总结
      - name: Build Summary
        # `if: always()`确保无论前面的步骤是否失败，这个总结步骤都会运行
        if: always()
        shell: pwsh
        run: |
          Write-Host "=== 构建状态总结 ===" -ForegroundColor Green
          if (Test-Path "build/Release/${env:targetName}") {
            Write-Host "✅ 构建成功: ${env:targetName}" -ForegroundColor Green
          } else {
            Write-Host "❌ 构建失败: 找不到可执行文件" -ForegroundColor Red
            # 如果需要让整个任务在构建失败时也失败，可以取消下面这行的注释
            # exit 1 
          }
          if ("${{ steps.package.outputs.packageSuccess }}" -eq "true") {
            Write-Host "✅ 打包成功 (但未上传)" -ForegroundColor Green
          } else {
            Write-Host "⚠️ 打包失败或未执行" -ForegroundColor Yellow
          }
          Write-Host "🎉 整体流程完成" -ForegroundColor Green